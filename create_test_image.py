#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import cv2
import numpy as np
import os

def create_test_car_image(output_path="test_images/car1.jpg", width=800, height=600):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width: —à–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –≤—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    print(f"üé® –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    image = np.ones((height, width, 3), dtype=np.uint8) * 255
    
    # –†–∏—Å—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–ø—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞)
    car_color = (100, 100, 100)  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_body = np.array([
        [width//4, height//2 + 50],
        [width//4 + 200, height//2 + 50],
        [width//4 + 250, height//2 + 20],
        [width//4 + 300, height//2 + 20],
        [width//4 + 350, height//2 + 50],
        [width//4 + 400, height//2 + 50],
        [width//4 + 400, height//2 + 100],
        [width//4, height//2 + 100]
    ], np.int32)
    
    cv2.fillPoly(image, [car_body], car_color)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–∞
    window_color = (200, 200, 255)  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
    
    # –ü–µ—Ä–µ–¥–Ω–µ–µ –æ–∫–Ω–æ
    front_window = np.array([
        [width//4 + 250, height//2 + 30],
        [width//4 + 300, height//2 + 30],
        [width//4 + 300, height//2 + 60],
        [width//4 + 250, height//2 + 60]
    ], np.int32)
    cv2.fillPoly(image, [front_window], window_color)
    
    # –ó–∞–¥–Ω–µ–µ –æ–∫–Ω–æ
    rear_window = np.array([
        [width//4 + 300, height//2 + 30],
        [width//4 + 350, height//2 + 30],
        [width//4 + 350, height//2 + 60],
        [width//4 + 300, height//2 + 60]
    ], np.int32)
    cv2.fillPoly(image, [rear_window], window_color)
    
    # –ö–æ–ª–µ—Å–∞
    wheel_color = (50, 50, 50)  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    
    # –ü–µ—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ
    cv2.circle(image, (width//4 + 80, height//2 + 100), 30, wheel_color, -1)
    cv2.circle(image, (width//4 + 80, height//2 + 100), 20, (100, 100, 100), -1)
    
    # –ó–∞–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ
    cv2.circle(image, (width//4 + 320, height//2 + 100), 30, wheel_color, -1)
    cv2.circle(image, (width//4 + 320, height//2 + 100), 20, (100, 100, 100), -1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º "–≥—Ä—è–∑—å" –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    dirt_color = (139, 69, 19)  # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
    
    # –ì—Ä—è–∑–Ω—ã–µ –ø—è—Ç–Ω–∞
    cv2.circle(image, (width//4 + 150, height//2 + 70), 15, dirt_color, -1)
    cv2.circle(image, (width//4 + 200, height//2 + 80), 12, dirt_color, -1)
    cv2.circle(image, (width//4 + 180, height//2 + 90), 10, dirt_color, -1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º "—Ü–∞—Ä–∞–ø–∏–Ω—ã"
    scratch_color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π
    
    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã
    cv2.line(image, (width//4 + 100, height//2 + 60), (width//4 + 180, height//2 + 60), scratch_color, 2)
    cv2.line(image, (width//4 + 120, height//2 + 75), (width//4 + 200, height//2 + 75), scratch_color, 2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º "–≤–º—è—Ç–∏–Ω—É"
    dent_color = (0, 0, 150)  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
    
    # –í–º—è—Ç–∏–Ω–∞ –Ω–∞ –∫—Ä—ã–ª–µ
    cv2.ellipse(image, (width//4 + 50, height//2 + 80), (25, 15), 0, 0, 360, dent_color, -1)
    cv2.ellipse(image, (width//4 + 50, height//2 + 80), (20, 10), 0, 0, 360, car_color, -1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º "—Ä–∞–∑–±–∏—Ç—É—é" —á–∞—Å—Ç—å
    broken_color = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π
    
    # –¢—Ä–µ—â–∏–Ω—ã –Ω–∞ –ª–æ–±–æ–≤–æ–º —Å—Ç–µ–∫–ª–µ
    cv2.line(image, (width//4 + 260, height//2 + 40), (width//4 + 290, height//2 + 50), broken_color, 3)
    cv2.line(image, (width//4 + 270, height//2 + 35), (width//4 + 285, height//2 + 55), broken_color, 2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –ø–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
    shadow_color = (200, 200, 200)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    cv2.ellipse(image, (width//2, height//2 + 120), (200, 30), 0, 0, 360, shadow_color, -1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    font = cv2.FONT_HERSHEY_SIMPLEX
    text = "Test Car Image - Multiple Damage Types"
    text_size = cv2.getTextSize(text, font, 0.7, 2)[0]
    text_x = (width - text_size[0]) // 2
    text_y = 30
    
    cv2.putText(image, text, (text_x, text_y), font, 0.7, (0, 0, 0), 2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    legend_y = height - 100
    legend_items = [
        ("Clean areas", (0, 255, 0)),
        ("Dirty spots", (139, 69, 19)),
        ("Scratches", (0, 0, 255)),
        ("Dent", (0, 0, 150)),
        ("Broken glass", (0, 0, 0))
    ]
    
    for i, (label, color) in enumerate(legend_items):
        y_pos = legend_y + i * 15
        cv2.circle(image, (20, y_pos), 5, color, -1)
        cv2.putText(image, label, (35, y_pos + 5), font, 0.4, (0, 0, 0), 1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cv2.imwrite(output_path, image)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
    print(f"   –†–∞–∑–º–µ—Ä: {width}x{height}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç: —á–∏—Å—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏, –≥—Ä—è–∑—å, —Ü–∞—Ä–∞–ø–∏–Ω—ã, –≤–º—è—Ç–∏–Ω—ã, —Ä–∞–∑–±–∏—Ç–æ–µ —Å—Ç–µ–∫–ª–æ")

def create_clean_car_image(output_path="test_images/car_clean.jpg", width=800, height=600):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    print(f"üé® –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    image = np.ones((height, width, 3), dtype=np.uint8) * 255
    
    # –†–∏—Å—É–µ–º —á–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    car_color = (0, 100, 200)  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_body = np.array([
        [width//4, height//2 + 50],
        [width//4 + 200, height//2 + 50],
        [width//4 + 250, height//2 + 20],
        [width//4 + 300, height//2 + 20],
        [width//4 + 350, height//2 + 50],
        [width//4 + 400, height//2 + 50],
        [width//4 + 400, height//2 + 100],
        [width//4, height//2 + 100]
    ], np.int32)
    
    cv2.fillPoly(image, [car_body], car_color)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫–∏ (—á–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å)
    highlight_color = (100, 150, 255)  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
    cv2.ellipse(image, (width//4 + 150, height//2 + 70), (60, 20), 0, 0, 360, highlight_color, -1)
    
    # –û–∫–Ω–∞
    window_color = (200, 200, 255)
    front_window = np.array([
        [width//4 + 250, height//2 + 30],
        [width//4 + 300, height//2 + 30],
        [width//4 + 300, height//2 + 60],
        [width//4 + 250, height//2 + 60]
    ], np.int32)
    cv2.fillPoly(image, [front_window], window_color)
    
    rear_window = np.array([
        [width//4 + 300, height//2 + 30],
        [width//4 + 350, height//2 + 30],
        [width//4 + 350, height//2 + 60],
        [width//4 + 300, height//2 + 60]
    ], np.int32)
    cv2.fillPoly(image, [rear_window], window_color)
    
    # –ö–æ–ª–µ—Å–∞
    wheel_color = (50, 50, 50)
    cv2.circle(image, (width//4 + 80, height//2 + 100), 30, wheel_color, -1)
    cv2.circle(image, (width//4 + 80, height//2 + 100), 20, (100, 100, 100), -1)
    cv2.circle(image, (width//4 + 320, height//2 + 100), 30, wheel_color, -1)
    cv2.circle(image, (width//4 + 320, height//2 + 100), 20, (100, 100, 100), -1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    font = cv2.FONT_HERSHEY_SIMPLEX
    text = "Clean Car - No Damage"
    text_size = cv2.getTextSize(text, font, 0.7, 2)[0]
    text_x = (width - text_size[0]) // 2
    text_y = 30
    
    cv2.putText(image, text, (text_x, text_y), font, 0.7, (0, 0, 0), 2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    cv2.imwrite(output_path, image)
    print(f"‚úÖ –ß–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üé® –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    create_test_car_image("test_images/car1.jpg")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    create_clean_car_image("test_images/car_clean.jpg")
    
    print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!")
    print(f"   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å detect.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()
