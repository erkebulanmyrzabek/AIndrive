#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ YOLOv8 –≤ —Ñ–æ—Ä–º–∞—Ç ONNX
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import os
import torch
from ultralytics import YOLO
import onnx
import onnxruntime as ort
import numpy as np

def check_onnx_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É ONNX –∏ ONNXRuntime"""
    try:
        import onnx
        import onnxruntime as ort
        print("‚úÖ ONNX –∏ ONNXRuntime —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print(f"   ONNX –≤–µ—Ä—Å–∏—è: {onnx.__version__}")
        print(f"   ONNXRuntime –≤–µ—Ä—Å–∏—è: {ort.__version__}")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ONNX: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install onnx onnxruntime")
        return False

def export_to_onnx(model_path, output_dir="exports", imgsz=640):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å YOLOv8 –≤ —Ñ–æ—Ä–º–∞—Ç ONNX"""
    print(f"üîÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ ONNX...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_path}")
        model = YOLO(model_path)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(output_dir, exist_ok=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ ONNX
        print(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {imgsz}x{imgsz}")
        print(f"   –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        exported_path = model.export(
            format='onnx',
            imgsz=imgsz,
            optimize=True,
            half=False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FP32 –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            dynamic=False,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞
            simplify=True,  # –£–ø—Ä–æ—â–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
            opset=11,  # –í–µ—Ä—Å–∏—è ONNX opset
            verbose=True
        )
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   ONNX –º–æ–¥–µ–ª—å: {exported_path}")
        
        return exported_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return None

def validate_onnx_model(onnx_path, test_input_shape=(1, 3, 640, 640)):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é ONNX –º–æ–¥–µ–ª—å"""
    print(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º ONNX –º–æ–¥–µ–ª—å...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ONNX –º–æ–¥–µ–ª—å
        onnx_model = onnx.load(onnx_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        onnx.checker.check_model(onnx_model)
        print("‚úÖ ONNX –º–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ONNXRuntime
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ONNXRuntime...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é ONNXRuntime
        providers = ['CPUExecutionProvider']
        if torch.cuda.is_available():
            providers.insert(0, 'CUDAExecutionProvider')
        
        session = ort.InferenceSession(onnx_path, providers=providers)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ –∏ –≤—ã—Ö–æ–¥–µ
        input_info = session.get_inputs()[0]
        output_info = session.get_outputs()
        
        print(f"   –í—Ö–æ–¥: {input_info.name}, —Ñ–æ—Ä–º–∞: {input_info.shape}")
        print(f"   –í—ã—Ö–æ–¥—ã: {len(output_info)}")
        for i, output in enumerate(output_info):
            print(f"     {i}: {output.name}, —Ñ–æ—Ä–º–∞: {output.shape}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_input = np.random.randn(*test_input_shape).astype(np.float32)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        outputs = session.run(None, {input_info.name: test_input})
        
        print(f"‚úÖ ONNXRuntime —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        print(f"   –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: ~{len(outputs)} –≤—ã—Ö–æ–¥–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def get_model_info(model_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    try:
        model = YOLO(model_path)
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: YOLOv8")
        print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(model_path) / 1024**2:.1f} MB")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö
        if hasattr(model, 'names'):
            print(f"   –ö–ª–∞—Å—Å—ã: {list(model.names.values())}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {e}")
        return False

def compare_model_sizes(original_path, onnx_path):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ ONNX –º–æ–¥–µ–ª–µ–π"""
    try:
        original_size = os.path.getsize(original_path) / 1024**2
        onnx_size = os.path.getsize(onnx_path) / 1024**2
        
        print(f"üìè –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π:")
        print(f"   PyTorch (.pt): {original_size:.1f} MB")
        print(f"   ONNX (.onnx): {onnx_size:.1f} MB")
        print(f"   –°–∂–∞—Ç–∏–µ: {((original_size - onnx_size) / original_size * 100):.1f}%")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîÑ –≠–ö–°–ü–û–†–¢ YOLOv8 –í ONNX")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É ONNX
    if not check_onnx_installation():
        return
    
    # –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_path = "runs/damage/weights/best.pt"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train_yolo.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
    print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    get_model_info(model_path)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ ONNX
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç...")
    onnx_path = export_to_onnx(model_path, output_dir="exports", imgsz=640)
    
    if onnx_path is None:
        print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è!")
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è...")
    if validate_onnx_model(onnx_path):
        print("‚úÖ ONNX –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è  ONNX –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    print(f"\nüìè –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤:")
    compare_model_sizes(model_path, onnx_path)
    
    print(f"\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"   ONNX –º–æ–¥–µ–ª—å: {onnx_path}")
    print(f"   –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ production!")

if __name__ == "__main__":
    main()
