#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
from ultralytics import YOLO
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöó Car Damage Detection",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .sub-header {
        font-size: 1.2rem;
        text-align: center;
        color: #666;
        margin-bottom: 3rem;
    }
    
    .upload-section {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 2rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .result-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .damage-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-weight: bold;
        margin: 0.25rem;
    }
    
    .clean { background-color: #d4edda; color: #155724; }
    .dirty { background-color: #fff3cd; color: #856404; }
    .dented { background-color: #f8d7da; color: #721c24; }
    .scratched { background-color: #cce5ff; color: #004085; }
    .broken { background-color: #f5c6cb; color: #721c24; }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
</style>
""", unsafe_allow_html=True)

# –ö–ª–∞—Å—Å—ã –∏ –∏—Ö —Ü–≤–µ—Ç–∞
CLASS_INFO = {
    0: {"name": "–ß–∏—Å—Ç—ã–π", "color": "clean", "emoji": "‚ú®", "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"},
    1: {"name": "–ì—Ä—è–∑–Ω—ã–π", "color": "dirty", "emoji": "üíß", "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞"},
    2: {"name": "–í–º—è—Ç–∏–Ω—ã", "color": "dented", "emoji": "üî®", "description": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"},
    3: {"name": "–¶–∞—Ä–∞–ø–∏–Ω—ã", "color": "scratched", "emoji": "üî™", "description": "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"},
    4: {"name": "–†–∞–∑–±–∏—Ç—ã–π", "color": "broken", "emoji": "üí•", "description": "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"}
}

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å YOLOv8"""
    model_path = "runs/damage/weights/best.pt"
    
    if not os.path.exists(model_path):
        st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: `python train_yolo.py`")
        return None
    
    try:
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

def preprocess_image(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ OpenCV
    img_array = np.array(image)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGB –≤ BGR –¥–ª—è OpenCV
    if len(img_array.shape) == 3 and img_array.shape[2] == 3:
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
    
    return img_array

def draw_detections(image, boxes, scores, class_ids):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    img_with_detections = image.copy()
    
    for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox
        x1, y1, x2, y2 = map(int, box)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
        class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "color": "clean"})
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è bbox
        colors = {
            "clean": (0, 255, 0),      # –∑–µ–ª–µ–Ω—ã–π
            "dirty": (0, 165, 255),    # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            "dented": (0, 0, 255),     # –∫—Ä–∞—Å–Ω—ã–π
            "scratched": (255, 0, 0),  # —Å–∏–Ω–∏–π
            "broken": (128, 0, 128),   # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        
        color = colors.get(class_info["color"], (255, 255, 255))
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(img_with_detections, (x1, y1), (x2, y2), color, 3)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        label = f'{class_info["name"]}: {score:.2f}'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        (text_width, text_height), baseline = cv2.getTextSize(
            label, cv2.FONT_HERSHEY_SIMPLEX, 0.8, 2
        )
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        cv2.rectangle(
            img_with_detections,
            (x1, y1 - text_height - baseline - 10),
            (x1 + text_width + 10, y1),
            color,
            -1
        )
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        cv2.putText(
            img_with_detections,
            label,
            (x1 + 5, y1 - baseline - 5),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.8,
            (255, 255, 255),
            2
        )
    
    return img_with_detections

def predict_damage(model, image, conf_threshold=0.5):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        results = model(image, conf=conf_threshold, verbose=False)
        
        if len(results) > 0 and results[0].boxes is not None:
            boxes = results[0].boxes.xyxy.cpu().numpy()
            scores = results[0].boxes.conf.cpu().numpy()
            class_ids = results[0].boxes.cls.cpu().numpy().astype(int)
            
            return boxes, scores, class_ids
        else:
            return np.array([]), np.array([]), np.array([])
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        return np.array([]), np.array([]), np.array([])

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üöó Car Damage Detection</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è</p>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        conf_threshold = st.slider(
            "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            min_value=0.1,
            max_value=1.0,
            value=0.5,
            step=0.05,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–µ–∫—Ü–∏–π"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.markdown("## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        model_path = "runs/damage/weights/best.pt"
        if os.path.exists(model_path):
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            file_size = os.path.getsize(model_path) / (1024 * 1024)
            st.info(f"–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {file_size:.1f} MB")
        else:
            st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ö–ª–∞—Å—Å—ã
        st.markdown("## üè∑Ô∏è –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        for class_id, info in CLASS_INFO.items():
            st.markdown(f"**{info['emoji']} {info['name']}**")
            st.caption(info['description'])
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="upload-section">', unsafe_allow_html=True)
        st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=['jpg', 'jpeg', 'png', 'bmp'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP"
        )
        
        if uploaded_file is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                    model = load_model()
                    
                    if model is not None:
                        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                        img_array = preprocess_image(image)
                        
                        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                        boxes, scores, class_ids = predict_damage(model, img_array, conf_threshold)
                        
                        if len(boxes) > 0:
                            # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
                            img_with_detections = draw_detections(img_array, boxes, scores, class_ids)
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            img_with_detections_rgb = cv2.cvtColor(img_with_detections, cv2.COLOR_BGR2RGB)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                            st.session_state['result_image'] = img_with_detections_rgb
                            st.session_state['detections'] = {
                                'boxes': boxes,
                                'scores': scores,
                                'class_ids': class_ids
                            }
                            
                            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        else:
                            st.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                            st.session_state['result_image'] = None
                            st.session_state['detections'] = None
        else:
            st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        if 'result_image' in st.session_state and st.session_state['result_image'] is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.image(st.session_state['result_image'], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", use_column_width=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
            if 'detections' in st.session_state and st.session_state['detections'] is not None:
                detections = st.session_state['detections']
                boxes = detections['boxes']
                scores = detections['scores']
                class_ids = detections['class_ids']
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.markdown("#### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                col_metric1, col_metric2, col_metric3 = st.columns(3)
                
                with col_metric1:
                    st.metric("–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π", len(boxes))
                
                with col_metric2:
                    avg_confidence = np.mean(scores) if len(scores) > 0 else 0
                    st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
                
                with col_metric3:
                    max_confidence = np.max(scores) if len(scores) > 0 else 0
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{max_confidence:.2f}")
                
                # –î–µ—Ç–∞–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–π
                st.markdown("#### üîç –î–µ—Ç–∞–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
                
                for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
                    class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "color": "clean"})
                    
                    with st.expander(f"{class_info['emoji']} {class_info['name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f})"):
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {class_info['description']}")
                        st.markdown(f"**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** x1={box[0]:.0f}, y1={box[1]:.0f}, x2={box[2]:.0f}, y2={box[3]:.0f}")
                        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {box[2]-box[0]:.0f} x {box[3]-box[1]:.0f} –ø–∏–∫—Å–µ–ª–µ–π")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                
                unique_classes = np.unique(class_ids)
                recommendations = []
                
                for class_id in unique_classes:
                    class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}"})
                    
                    if class_id == 0:  # clean
                        recommendations.append("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
                    elif class_id == 1:  # dirty
                        recommendations.append("üßΩ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                    elif class_id == 2:  # dented
                        recommendations.append("üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–º—è—Ç–∏–Ω")
                    elif class_id == 3:  # scratched
                        recommendations.append("üé® –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–æ–∫—Ä–∞—Å–∫–∏")
                    elif class_id == 4:  # broken
                        recommendations.append("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ")
                
                for rec in recommendations:
                    st.info(rec)
        
        else:
            st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            <p>üöó Car Damage Detection | Powered by YOLOv8 | Made with ‚ù§Ô∏è and Streamlit</p>
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
