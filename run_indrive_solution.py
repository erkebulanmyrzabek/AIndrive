#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è inDrive –∫–µ–π—Å–∞
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import subprocess
import sys
import os
import time

def print_banner():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä"""
    print("=" * 80)
    print("üöó inDrive Car Condition Detection Solution")
    print("   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 80)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = [
        'streamlit', 'ultralytics', 'opencv-python', 
        'torch', 'plotly', 'numpy', 'PIL'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"   ‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements_streamlit.txt")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def create_demo_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüé® –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞
        subprocess.run([sys.executable, "create_dataset_structure.py"], check=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        subprocess.run([sys.executable, "create_test_image.py"], check=True)
        
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def train_model():
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å"""
    print("\nü§ñ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å...")
    
    model_path = "indrive_runs/car_condition/weights/best.pt"
    
    if os.path.exists(model_path):
        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞")
        return True
    
    try:
        print("   –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        subprocess.run([sys.executable, "train_indrive.py"], check=True)
        
        if os.path.exists(model_path):
            print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def create_presentation():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    print("\nüìä –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...")
    
    try:
        subprocess.run([sys.executable, "presentation_materials.py"], check=True)
        print("‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        return False

def run_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
    
    try:
        print("   –û—Ç–∫—Ä—ã–≤–∞–µ–º Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        print("   URL: http://localhost:8501")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "app_indrive.py",
            "--server.port", "8501",
            "--browser.gatherUsageStats", "false"
        ], check=True)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ: {e}")

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –æ–±—É—á–µ–Ω–∏–µ + –¥–µ–º–æ)")
    print("2. üé® –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö")
    print("3. ü§ñ –¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    print("4. üöÄ –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –¥–µ–º–æ")
    print("5. üìä –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    print("6. ‚ùå –í—ã—Ö–æ–¥")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    while True:
        show_menu()
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-6): ").strip()
        
        if choice == "1":
            # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫
            print("\nüöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–µ—à–µ–Ω–∏—è...")
            
            if not create_demo_data():
                continue
                
            if not train_model():
                print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é")
            
            create_presentation()
            run_demo()
            
        elif choice == "2":
            # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            create_demo_data()
            
        elif choice == "3":
            # –¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ
            train_model()
            
        elif choice == "4":
            # –¢–æ–ª—å–∫–æ –¥–µ–º–æ
            run_demo()
            
        elif choice == "5":
            # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            create_presentation()
            
        elif choice == "6":
            # –í—ã—Ö–æ–¥
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()
