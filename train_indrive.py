#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è inDrive –∫–µ–π—Å–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import os
import yaml
import torch
import numpy as np
from ultralytics import YOLO
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
import json
from datetime import datetime

# –ö–ª–∞—Å—Å—ã –¥–ª—è inDrive –∫–µ–π—Å–∞
INDRIVE_CLASSES = {
    0: {"name": "clean_intact", "description": "–ß–∏—Å—Ç—ã–π –∏ —Ü–µ–ª—ã–π", "priority": "high"},
    1: {"name": "clean_damaged", "description": "–ß–∏—Å—Ç—ã–π, –Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π", "priority": "medium"},
    2: {"name": "dirty_intact", "description": "–ì—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π", "priority": "medium"},
    3: {"name": "dirty_damaged", "description": "–ì—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π", "priority": "low"},
    4: {"name": "very_dirty", "description": "–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π", "priority": "low"},
    5: {"name": "severely_damaged", "description": "–°–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π", "priority": "critical"}
}

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
    if torch.cuda.is_available():
        print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        print(f"   –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        return True
    else:
        print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
        return False

def load_data_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    try:
        with open('indrive_data.yaml', 'r', encoding='utf-8') as f:
            data_config = yaml.safe_load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ö–ª–∞—Å—Å—ã: {data_config['names']}")
        return data_config
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª indrive_data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ indrive_data.yaml: {e}")
        return None

def create_indrive_dataset_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è inDrive"""
    print("üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è inDrive...")
    
    directories = [
        "indrive_dataset",
        "indrive_dataset/images",
        "indrive_dataset/images/train",
        "indrive_dataset/images/val", 
        "indrive_dataset/images/test",
        "indrive_dataset/labels",
        "indrive_dataset/labels/train",
        "indrive_dataset/labels/val",
        "indrive_dataset/labels/test",
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"   ‚úÖ {directory}/")
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞
    readme_content = """# inDrive Dataset - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è

## –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
- **–ß–∏—Å—Ç–æ—Ç–∞**: clean (—á–∏—Å—Ç—ã–π) vs dirty (–≥—Ä—è–∑–Ω—ã–π) vs very_dirty (–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π)
- **–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å**: intact (—Ü–µ–ª—ã–π) vs damaged (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π) vs severely_damaged (—Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π)

### –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:
0. **clean_intact** - –ß–∏—Å—Ç—ã–π –∏ —Ü–µ–ª—ã–π (–∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
1. **clean_damaged** - –ß–∏—Å—Ç—ã–π, –Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
2. **dirty_intact** - –ì—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π (–Ω—É–∂–Ω–∞ –º–æ–π–∫–∞)
3. **dirty_damaged** - –ì—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π (–º–æ–π–∫–∞ + —Ä–µ–º–æ–Ω—Ç)
4. **very_dirty** - –û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
5. **severely_damaged** - –°–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π (–Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω)

## –§–æ—Ä–º–∞—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π YOLO:
```
class_id center_x center_y width height
```

## –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è inDrive:
- **high**: clean_intact (–º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã)
- **medium**: clean_damaged, dirty_intact (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
- **low**: dirty_damaged, very_dirty (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- **critical**: severely_damaged (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
"""
    
    with open("indrive_dataset/README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("   ‚úÖ indrive_dataset/README.md")

def train_indrive_model():
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è inDrive –∫–µ–π—Å–∞"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è inDrive...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    use_gpu = check_gpu()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    data_config = load_data_config()
    if not data_config:
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞
    create_indrive_dataset_structure()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    dataset_path = data_config.get('path', './indrive_dataset')
    if not os.path.exists(dataset_path):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dataset_path}")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ indrive_data.yaml")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8n...")
        model = YOLO('yolov8n.pt')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è inDrive
        training_args = {
            'data': 'indrive_data.yaml',
            'epochs': 100,  # –ë–æ–ª—å—à–µ —ç–ø–æ—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            'imgsz': 640,
            'batch': 16 if use_gpu else 8,
            'device': 'cuda' if use_gpu else 'cpu',
            'project': 'indrive_runs',
            'name': 'car_condition',
            'save': True,
            'save_period': 20,
            'cache': True,
            'workers': 8 if use_gpu else 4,
            'patience': 15,  # –ë–æ–ª—å—à–µ —Ç–µ—Ä–ø–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
            'lr0': 0.01,
            'lrf': 0.1,
            'momentum': 0.937,
            'weight_decay': 0.0005,
            'warmup_epochs': 5,
            'warmup_momentum': 0.8,
            'warmup_bias_lr': 0.1,
            'box': 7.5,
            'cls': 0.5,
            'dfl': 1.5,
            'val': True,
            'plots': True,
            'verbose': True,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è inDrive
            'augment': True,  # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            'mixup': 0.1,     # Mixup –¥–ª—è –ª—É—á—à–µ–π –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏–∏
            'copy_paste': 0.1, # Copy-paste –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
            'degrees': 10,    # –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'translate': 0.1, # –°–¥–≤–∏–≥
            'scale': 0.5,     # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            'shear': 2.0,     # –ù–∞–∫–ª–æ–Ω
            'perspective': 0.0, # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
            'flipud': 0.0,    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
            'fliplr': 0.5,    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
            'mosaic': 1.0,    # –ú–æ–∑–∞–∏–∫–∞
            'mixup': 0.1,     # Mixup
        }
        
        print("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è inDrive:")
        for key, value in training_args.items():
            print(f"   {key}: {value}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        print("\nüî• –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        results = model.train(**training_args)
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: indrive_runs/car_condition/")
        print(f"   –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: indrive_runs/car_condition/weights/best.pt")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_training_results(results, 'indrive_runs/car_condition/')
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def analyze_training_results(results, output_dir):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_dir = os.path.join(output_dir, 'analysis')
        os.makedirs(analysis_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if hasattr(results, 'results_dict'):
            metrics = results.results_dict
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = {
                'timestamp': datetime.now().isoformat(),
                'model': 'YOLOv8n for inDrive',
                'classes': INDRIVE_CLASSES,
                'metrics': {
                    'mAP50': metrics.get('metrics/mAP50(B)', 0),
                    'mAP50-95': metrics.get('metrics/mAP50-95(B)', 0),
                    'precision': metrics.get('metrics/precision(B)', 0),
                    'recall': metrics.get('metrics/recall(B)', 0),
                    'f1': metrics.get('metrics/f1(B)', 0)
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            with open(os.path.join(analysis_dir, 'training_report.json'), 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            
            print("üìà –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   mAP50: {report['metrics']['mAP50']:.3f}")
            print(f"   mAP50-95: {report['metrics']['mAP50-95']:.3f}")
            print(f"   Precision: {report['metrics']['precision']:.3f}")
            print(f"   Recall: {report['metrics']['recall']:.3f}")
            print(f"   F1: {report['metrics']['f1']:.3f}")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è inDrive
            evaluate_indrive_quality(report['metrics'])
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def evaluate_indrive_quality(metrics):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –¥–ª—è inDrive"""
    print("\nüéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è inDrive:")
    
    mAP50 = metrics.get('mAP50', 0)
    precision = metrics.get('precision', 0)
    recall = metrics.get('recall', 0)
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è inDrive
    if mAP50 >= 0.8 and precision >= 0.8 and recall >= 0.8:
        print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –≥–æ—Ç–æ–≤–æ –¥–ª—è production")
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ inDrive")
    elif mAP50 >= 0.7 and precision >= 0.7 and recall >= 0.7:
        print("   ‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤")
    else:
        print("   ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥, —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º
    print("\nüìã –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è inDrive:")
    for class_id, info in INDRIVE_CLASSES.items():
        priority = info['priority']
        if priority == 'critical':
            print(f"   üö® {info['name']}: {info['description']} - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –∫–ª–∞—Å—Å")
        elif priority == 'high':
            print(f"   ‚úÖ {info['name']}: {info['description']} - –í–´–°–û–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        elif priority == 'medium':
            print(f"   ‚ö†Ô∏è  {info['name']}: {info['description']} - –°–†–ï–î–ù–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        else:
            print(f"   üìâ {info['name']}: {info['description']} - –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

def create_indrive_demo_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è inDrive"""
    print("üé® –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è inDrive...")
    
    from create_test_image import create_test_car_image, create_clean_car_image
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    demo_images = [
        ("clean_intact", "–ß–∏—Å—Ç—ã–π –∏ —Ü–µ–ª—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"),
        ("clean_damaged", "–ß–∏—Å—Ç—ã–π, –Ω–æ —Å —Ü–∞—Ä–∞–ø–∏–Ω–∞–º–∏"),
        ("dirty_intact", "–ì—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π"),
        ("dirty_damaged", "–ì—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π"),
        ("very_dirty", "–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π"),
        ("severely_damaged", "–°–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π")
    ]
    
    for i, (class_name, description) in enumerate(demo_images):
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if "clean" in class_name and "intact" in class_name:
            create_clean_car_image(f"indrive_dataset/images/train/demo_{class_name}.jpg")
        else:
            create_test_car_image(f"indrive_dataset/images/train/demo_{class_name}.jpg")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        with open(f"indrive_dataset/labels/train/demo_{class_name}.txt", "w") as f:
            f.write(f"{i} 0.5 0.5 0.8 0.6")  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π bbox
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ: {class_name} - {description}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üöó –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –î–õ–Ø inDrive –ö–ï–ô–°–ê")
    print("   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: —á–∏—Å—Ç–æ—Ç–∞ + —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('indrive_data.yaml'):
        print("‚ùå –§–∞–π–ª indrive_data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    create_indrive_demo_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    success = train_indrive_model()
    
    if success:
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app_indrive.py –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python app_indrive.py")
    else:
        print("\nüí• –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")

if __name__ == "__main__":
    main()
