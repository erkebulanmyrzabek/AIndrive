#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è inDrive –∫–µ–π—Å–∞
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: —á–∏—Å—Ç–æ—Ç–∞ + —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
from ultralytics import YOLO
import time
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöó inDrive Car Condition Detection",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è inDrive
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 1rem;
        background: linear-gradient(90deg, #FF6B35 0%, #F7931E 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .sub-header {
        font-size: 1.3rem;
        text-align: center;
        color: #666;
        margin-bottom: 2rem;
        font-style: italic;
    }
    
    .indrive-card {
        background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
        color: white;
        padding: 2rem;
        border-radius: 20px;
        margin: 1rem 0;
        box-shadow: 0 10px 25px rgba(255, 107, 53, 0.3);
    }
    
    .priority-critical {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 5px solid #dc3545;
    }
    
    .priority-high {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 5px solid #28a745;
    }
    
    .priority-medium {
        background: linear-gradient(135deg, #ffc107, #fd7e14);
        color: #212529;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 5px solid #ffc107;
    }
    
    .priority-low {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
        padding: 1rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 5px solid #6c757d;
    }
    
    .upload-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 2.5rem;
        border-radius: 20px;
        margin: 2rem 0;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        border: 2px solid #FF6B35;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 5px 15px rgba(255, 107, 53, 0.3);
    }
    
    .recommendation-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border-left: 5px solid #FF6B35;
    }
</style>
""", unsafe_allow_html=True)

# –ö–ª–∞—Å—Å—ã –¥–ª—è inDrive –∫–µ–π—Å–∞
INDRIVE_CLASSES = {
    0: {
        "name": "clean_intact",
        "display_name": "–ß–∏—Å—Ç—ã–π –∏ —Ü–µ–ª—ã–π",
        "emoji": "‚ú®",
        "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
        "priority": "high",
        "action": "‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã",
        "color": "#28a745"
    },
    1: {
        "name": "clean_damaged", 
        "display_name": "–ß–∏—Å—Ç—ã–π, –Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
        "emoji": "üîß",
        "description": "–ï—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã –∏–ª–∏ –≤–º—è—Ç–∏–Ω—ã",
        "priority": "medium",
        "action": "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è",
        "color": "#ffc107"
    },
    2: {
        "name": "dirty_intact",
        "display_name": "–ì—Ä—è–∑–Ω—ã–π, –Ω–æ —Ü–µ–ª—ã–π", 
        "emoji": "üíß",
        "description": "–ù—É–∂–Ω–∞ –º–æ–π–∫–∞",
        "priority": "medium",
        "action": "üßΩ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞",
        "color": "#17a2b8"
    },
    3: {
        "name": "dirty_damaged",
        "display_name": "–ì—Ä—è–∑–Ω—ã–π –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
        "emoji": "üî®",
        "description": "–¢—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏ –∏ —Ä–µ–º–æ–Ω—Ç–∞",
        "priority": "low",
        "action": "üö´ –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤",
        "color": "#6c757d"
    },
    4: {
        "name": "very_dirty",
        "display_name": "–û—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π",
        "emoji": "üí©",
        "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã",
        "priority": "low",
        "action": "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ –º–æ–π–∫–∏",
        "color": "#6c757d"
    },
    5: {
        "name": "severely_damaged",
        "display_name": "–°–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π",
        "emoji": "üí•",
        "description": "–ù–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏",
        "priority": "critical",
        "action": "üö® –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
        "color": "#dc3545"
    }
}

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å YOLOv8 –¥–ª—è inDrive"""
    model_path = "indrive_runs/car_condition/weights/best.pt"
    
    if not os.path.exists(model_path):
        st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: `python train_indrive.py`")
        return None
    
    try:
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

def preprocess_image(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_array = np.array(image)
    
    if len(img_array.shape) == 3 and img_array.shape[2] == 3:
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
    
    return img_array

def draw_indrive_detections(image, boxes, scores, class_ids):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ inDrive"""
    img_with_detections = image.copy()
    
    colors = {
        "clean_intact": (0, 255, 0),      # –∑–µ–ª–µ–Ω—ã–π
        "clean_damaged": (255, 255, 0),   # –∂–µ–ª—Ç—ã–π
        "dirty_intact": (0, 255, 255),    # –≥–æ–ª—É–±–æ–π
        "dirty_damaged": (128, 128, 128), # —Å–µ—Ä—ã–π
        "very_dirty": (0, 0, 128),        # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        "severely_damaged": (0, 0, 255),  # –∫—Ä–∞—Å–Ω—ã–π
    }
    
    for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
        x1, y1, x2, y2 = map(int, box)
        class_info = INDRIVE_CLASSES.get(class_id, {"name": f"class_{class_id}", "display_name": f"Class {class_id}"})
        color = colors.get(class_info["name"], (255, 255, 255))
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(img_with_detections, (x1, y1), (x2, y2), color, 3)
        
        # –ü–æ–¥–ø–∏—Å—å
        label = f'{class_info["emoji"]} {class_info["display_name"]}: {score:.2f}'
        (text_width, text_height), baseline = cv2.getTextSize(
            label, cv2.FONT_HERSHEY_SIMPLEX, 0.8, 2
        )
        
        # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        cv2.rectangle(
            img_with_detections,
            (x1, y1 - text_height - baseline - 10),
            (x1 + text_width + 10, y1),
            color,
            -1
        )
        
        # –¢–µ–∫—Å—Ç
        cv2.putText(
            img_with_detections,
            label,
            (x1 + 5, y1 - baseline - 5),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.8,
            (255, 255, 255),
            2
        )
    
    return img_with_detections

def predict_indrive_condition(model, image, conf_threshold=0.5):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è inDrive"""
    try:
        results = model(image, conf=conf_threshold, verbose=False)
        
        if len(results) > 0 and results[0].boxes is not None:
            boxes = results[0].boxes.xyxy.cpu().numpy()
            scores = results[0].boxes.conf.cpu().numpy()
            class_ids = results[0].boxes.cls.cpu().numpy().astype(int)
            
            return boxes, scores, class_ids
        else:
            return np.array([]), np.array([]), np.array([])
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        return np.array([]), np.array([]), np.array([])

def get_indrive_recommendation(class_ids, scores):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è inDrive –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if len(class_ids) == 0:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π –∫–ª–∞—Å—Å
    priorities = {"critical": 4, "low": 3, "medium": 2, "high": 1}
    max_priority = 0
    critical_class = None
    
    for class_id in class_ids:
        class_info = INDRIVE_CLASSES.get(class_id, {"priority": "medium"})
        priority_level = priorities.get(class_info["priority"], 2)
        
        if priority_level > max_priority:
            max_priority = priority_level
            critical_class = class_id
    
    if critical_class is not None:
        class_info = INDRIVE_CLASSES[critical_class]
        return {
            "status": class_info["action"],
            "priority": class_info["priority"],
            "description": class_info["description"],
            "class_name": class_info["display_name"]
        }
    
    return "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

def create_indrive_dashboard(class_ids, scores):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ –¥–ª—è inDrive"""
    if len(class_ids) == 0:
        return None
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
    unique_classes, counts = np.unique(class_ids, return_counts=True)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    dashboard_data = []
    for class_id, count in zip(unique_classes, counts):
        class_info = INDRIVE_CLASSES.get(class_id, {"display_name": f"Class {class_id}", "priority": "medium"})
        class_scores = scores[class_ids == class_id]
        avg_score = np.mean(class_scores) if len(class_scores) > 0 else 0
        
        dashboard_data.append({
            '–ö–ª–∞—Å—Å': f"{class_info['emoji']} {class_info['display_name']}",
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
            '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': avg_score,
            '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': class_info['priority'],
            '–¶–≤–µ—Ç': class_info['color']
        })
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.bar(
        dashboard_data,
        x='–ö–ª–∞—Å—Å',
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        title="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è inDrive",
        color_discrete_map={
            'critical': '#dc3545',
            'low': '#6c757d',
            'medium': '#ffc107',
            'high': '#28a745'
        }
    )
    
    fig.update_layout(
        showlegend=True,
        height=400,
        font=dict(size=12)
    )
    
    return fig

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üöó inDrive Car Condition Detection</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞</p>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        conf_threshold = st.slider(
            "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            min_value=0.1,
            max_value=1.0,
            value=0.5,
            step=0.05,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–µ–∫—Ü–∏–π"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.markdown("## üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏")
        model_path = "indrive_runs/car_condition/weights/best.pt"
        if os.path.exists(model_path):
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            file_size = os.path.getsize(model_path) / (1024 * 1024)
            st.info(f"–†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        else:
            st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        st.markdown("## üè∑Ô∏è –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        for class_id, info in INDRIVE_CLASSES.items():
            priority_color = {
                "critical": "üî¥",
                "low": "‚ö´", 
                "medium": "üü°",
                "high": "üü¢"
            }.get(info["priority"], "‚ö™")
            
            st.markdown(f"**{priority_color} {info['emoji']} {info['display_name']}**")
            st.caption(f"{info['description']}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="upload-section">', unsafe_allow_html=True)
        st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            type=['jpg', 'jpeg', 'png', 'bmp'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP"
        )
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", type="primary", use_container_width=True):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è..."):
                    model = load_model()
                    
                    if model is not None:
                        img_array = preprocess_image(image)
                        boxes, scores, class_ids = predict_indrive_condition(model, img_array, conf_threshold)
                        
                        if len(boxes) > 0:
                            img_with_detections = draw_indrive_detections(img_array, boxes, scores, class_ids)
                            img_with_detections_rgb = cv2.cvtColor(img_with_detections, cv2.COLOR_BGR2RGB)
                            
                            st.session_state['result_image'] = img_with_detections_rgb
                            st.session_state['detections'] = {
                                'boxes': boxes,
                                'scores': scores,
                                'class_ids': class_ids
                            }
                            
                            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        else:
                            st.warning("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                            st.session_state['result_image'] = None
                            st.session_state['detections'] = None
        else:
            st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        if 'result_image' in st.session_state and st.session_state['result_image'] is not None:
            st.image(st.session_state['result_image'], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", use_column_width=True)
            
            if 'detections' in st.session_state and st.session_state['detections'] is not None:
                detections = st.session_state['detections']
                boxes = detections['boxes']
                scores = detections['scores']
                class_ids = detections['class_ids']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è inDrive
                recommendation = get_indrive_recommendation(class_ids, scores)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                st.markdown("#### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è inDrive")
                
                if isinstance(recommendation, dict):
                    priority_class = recommendation["priority"]
                    
                    if priority_class == "critical":
                        st.markdown(f'<div class="priority-critical">', unsafe_allow_html=True)
                        st.markdown(f"üö® **{recommendation['status']}**")
                        st.markdown(f"**–ö–ª–∞—Å—Å:** {recommendation['class_name']}")
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {recommendation['description']}")
                        st.markdown('</div>', unsafe_allow_html=True)
                    elif priority_class == "high":
                        st.markdown(f'<div class="priority-high">', unsafe_allow_html=True)
                        st.markdown(f"‚úÖ **{recommendation['status']}**")
                        st.markdown(f"**–ö–ª–∞—Å—Å:** {recommendation['class_name']}")
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {recommendation['description']}")
                        st.markdown('</div>', unsafe_allow_html=True)
                    elif priority_class == "medium":
                        st.markdown(f'<div class="priority-medium">', unsafe_allow_html=True)
                        st.markdown(f"‚ö†Ô∏è **{recommendation['status']}**")
                        st.markdown(f"**–ö–ª–∞—Å—Å:** {recommendation['class_name']}")
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {recommendation['description']}")
                        st.markdown('</div>', unsafe_allow_html=True)
                    else:
                        st.markdown(f'<div class="priority-low">', unsafe_allow_html=True)
                        st.markdown(f"üö´ **{recommendation['status']}**")
                        st.markdown(f"**–ö–ª–∞—Å—Å:** {recommendation['class_name']}")
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {recommendation['description']}")
                        st.markdown('</div>', unsafe_allow_html=True)
                else:
                    st.info(recommendation)
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                col_metric1, col_metric2, col_metric3 = st.columns(3)
                
                with col_metric1:
                    st.metric("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º", len(boxes))
                
                with col_metric2:
                    avg_confidence = np.mean(scores) if len(scores) > 0 else 0
                    st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
                
                with col_metric3:
                    max_confidence = np.max(scores) if len(scores) > 0 else 0
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{max_confidence:.2f}")
                
                # –î–∞—à–±–æ—Ä–¥
                st.markdown("#### üìà –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞")
                dashboard_fig = create_indrive_dashboard(class_ids, scores)
                if dashboard_fig:
                    st.plotly_chart(dashboard_fig, use_container_width=True)
                
                # –î–µ—Ç–∞–ª–∏
                st.markdown("#### üîç –î–µ—Ç–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
                
                for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
                    class_info = INDRIVE_CLASSES.get(class_id, {"display_name": f"Class {class_id}", "priority": "medium"})
                    
                    with st.expander(f"{class_info['emoji']} {class_info['display_name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f})"):
                        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {class_info['description']}")
                        st.markdown(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {class_info['priority']}")
                        st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {class_info['action']}")
                        st.markdown(f"**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** x1={box[0]:.0f}, y1={box[1]:.0f}, x2={box[2]:.0f}, y2={box[3]:.0f}")
                        st.markdown(f"**–†–∞–∑–º–µ—Ä:** {box[2]-box[0]:.0f} x {box[3]-box[1]:.0f} –ø–∏–∫—Å–µ–ª–µ–π")
        else:
            st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ'")
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; padding: 2rem;'>
            <p>üöó inDrive Car Condition Detection | Powered by YOLOv8 | Made with ‚ù§Ô∏è for inDrive</p>
            <p style='font-size: 0.8rem; margin-top: 1rem;'>
                –í–µ—Ä—Å–∏—è 1.0 | ¬© 2024 inDrive | –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
            </p>
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
