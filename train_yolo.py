#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è YOLOv8 –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import os
import yaml
from ultralytics import YOLO
import torch

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    if torch.cuda.is_available():
        print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        print(f"   –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        return True
    else:
        print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
        return False

def load_data_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    try:
        with open('data.yaml', 'r', encoding='utf-8') as f:
            data_config = yaml.safe_load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ö–ª–∞—Å—Å—ã: {data_config['names']}")
        return data_config
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ data.yaml: {e}")
        return None

def train_model():
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å YOLOv8"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLOv8...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    use_gpu = check_gpu()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
    data_config = load_data_config()
    if not data_config:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    dataset_path = data_config.get('path', './dataset')
    if not os.path.exists(dataset_path):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dataset_path}")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ data.yaml")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8n
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å YOLOv8n...")
        model = YOLO('yolov8n.pt')  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        training_args = {
            'data': 'data.yaml',           # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
            'epochs': 50,                  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
            'imgsz': 640,                  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'batch': 16 if use_gpu else 8, # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–º–µ–Ω—å—à–µ –¥–ª—è CPU)
            'device': 'cuda' if use_gpu else 'cpu',  # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            'project': 'runs',             # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            'name': 'damage',              # –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            'save': True,                  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç—ã
            'save_period': 10,             # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö
            'cache': True,                 # –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            'workers': 8 if use_gpu else 4, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
            'patience': 10,                # –†–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 10 —ç–ø–æ—Ö –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è
            'lr0': 0.01,                   # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            'lrf': 0.1,                    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            'momentum': 0.937,             # –ú–æ–º–µ–Ω—Ç
            'weight_decay': 0.0005,        # –í–µ—Å–æ–≤–æ–π —Ä–∞—Å–ø–∞–¥
            'warmup_epochs': 3,            # –≠–ø–æ—Ö–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞
            'warmup_momentum': 0.8,        # –ú–æ–º–µ–Ω—Ç —Ä–∞–∑–æ–≥—Ä–µ–≤–∞
            'warmup_bias_lr': 0.1,         # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è bias –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ
            'box': 7.5,                    # –í–µ—Å box loss
            'cls': 0.5,                    # –í–µ—Å classification loss
            'dfl': 1.5,                    # –í–µ—Å DFL loss
            'pose': 12.0,                  # –í–µ—Å pose loss (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            'kobj': 2.0,                   # –í–µ—Å keypoint obj loss (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
            'label_smoothing': 0.0,        # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç–æ–∫
            'nbs': 64,                     # Nominal batch size
            'overlap_mask': True,          # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–∞—Å–æ–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
            'mask_ratio': 4,               # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å–æ–∫
            'dropout': 0.0,                # Dropout (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ YOLOv8)
            'val': True,                   # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
            'plots': True,                 # –°–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
            'verbose': True,               # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        }
        
        print("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
        for key, value in training_args.items():
            print(f"   {key}: {value}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        print("\nüî• –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        results = model.train(**training_args)
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: runs/damage/")
        print(f"   –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: runs/damage/weights/best.pt")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å: runs/damage/weights/last.pt")
        
        # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
        if hasattr(results, 'results_dict'):
            metrics = results.results_dict
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   mAP50: {metrics.get('metrics/mAP50(B)', 0):.3f}")
            print(f"   mAP50-95: {metrics.get('metrics/mAP50-95(B)', 0):.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöó –û–ë–£–ß–ï–ù–ò–ï YOLOv8 –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –ê–í–¢–û–ú–û–ë–ò–õ–Ø")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('data.yaml'):
        print("‚ùå –§–∞–π–ª data.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    success = train_model()
    
    if success:
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å detect.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
    else:
        print("\nüí• –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")

if __name__ == "__main__":
    main()
