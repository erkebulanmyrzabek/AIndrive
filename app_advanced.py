#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
–ê–≤—Ç–æ—Ä: AI Assistant
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import tempfile
import os
from ultralytics import YOLO
import time
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöó Advanced Car Damage Detection",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 1rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .sub-header {
        font-size: 1.3rem;
        text-align: center;
        color: #666;
        margin-bottom: 2rem;
        font-style: italic;
    }
    
    .upload-section {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 2.5rem;
        border-radius: 20px;
        margin: 2rem 0;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .result-card {
        background: white;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 5px solid #667eea;
    }
    
    .damage-badge {
        display: inline-block;
        padding: 0.6rem 1.2rem;
        border-radius: 30px;
        font-weight: bold;
        margin: 0.3rem;
        font-size: 0.9rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .clean { background: linear-gradient(135deg, #d4edda, #c3e6cb); color: #155724; }
    .dirty { background: linear-gradient(135deg, #fff3cd, #ffeaa7); color: #856404; }
    .dented { background: linear-gradient(135deg, #f8d7da, #f5c6cb); color: #721c24; }
    .scratched { background: linear-gradient(135deg, #cce5ff, #b3d9ff); color: #004085; }
    .broken { background: linear-gradient(135deg, #f5c6cb, #f1aeb5); color: #721c24; }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 10px 10px 0 0;
        font-weight: bold;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #667eea;
        color: white;
    }
    
    .history-item {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #667eea;
    }
</style>
""", unsafe_allow_html=True)

# –ö–ª–∞—Å—Å—ã –∏ –∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
CLASS_INFO = {
    0: {
        "name": "–ß–∏—Å—Ç—ã–π", 
        "color": "clean", 
        "emoji": "‚ú®", 
        "description": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
        "severity": "–ù–µ—Ç",
        "action": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    },
    1: {
        "name": "–ì—Ä—è–∑–Ω—ã–π", 
        "color": "dirty", 
        "emoji": "üíß", 
        "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞",
        "severity": "–ù–∏–∑–∫–∞—è",
        "action": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞"
    },
    2: {
        "name": "–í–º—è—Ç–∏–Ω—ã", 
        "color": "dented", 
        "emoji": "üî®", 
        "description": "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
        "severity": "–°—Ä–µ–¥–Ω—è—è",
        "action": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å"
    },
    3: {
        "name": "–¶–∞—Ä–∞–ø–∏–Ω—ã", 
        "color": "scratched", 
        "emoji": "üî™", 
        "description": "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
        "severity": "–°—Ä–µ–¥–Ω—è—è",
        "action": "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–∏—Ä–æ–≤–∫—É"
    },
    4: {
        "name": "–†–∞–∑–±–∏—Ç—ã–π", 
        "color": "broken", 
        "emoji": "üí•", 
        "description": "–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
        "severity": "–í—ã—Å–æ–∫–∞—è",
        "action": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç"
    }
}

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å YOLOv8"""
    model_path = "runs/damage/weights/best.pt"
    
    if not os.path.exists(model_path):
        st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: `python train_yolo.py`")
        return None
    
    try:
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

def preprocess_image(image):
    """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    img_array = np.array(image)
    
    if len(img_array.shape) == 3 and img_array.shape[2] == 3:
        img_array = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
    
    return img_array

def draw_detections(image, boxes, scores, class_ids):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    img_with_detections = image.copy()
    
    colors = {
        "clean": (0, 255, 0),
        "dirty": (0, 165, 255),
        "dented": (0, 0, 255),
        "scratched": (255, 0, 0),
        "broken": (128, 0, 128),
    }
    
    for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
        x1, y1, x2, y2 = map(int, box)
        class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "color": "clean"})
        color = colors.get(class_info["color"], (255, 255, 255))
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        cv2.rectangle(img_with_detections, (x1, y1), (x2, y2), color, 3)
        
        # –ü–æ–¥–ø–∏—Å—å
        label = f'{class_info["emoji"]} {class_info["name"]}: {score:.2f}'
        (text_width, text_height), baseline = cv2.getTextSize(
            label, cv2.FONT_HERSHEY_SIMPLEX, 0.8, 2
        )
        
        # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        cv2.rectangle(
            img_with_detections,
            (x1, y1 - text_height - baseline - 10),
            (x1 + text_width + 10, y1),
            color,
            -1
        )
        
        # –¢–µ–∫—Å—Ç
        cv2.putText(
            img_with_detections,
            label,
            (x1 + 5, y1 - baseline - 5),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.8,
            (255, 255, 255),
            2
        )
    
    return img_with_detections

def predict_damage(model, image, conf_threshold=0.5):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        results = model(image, conf=conf_threshold, verbose=False)
        
        if len(results) > 0 and results[0].boxes is not None:
            boxes = results[0].boxes.xyxy.cpu().numpy()
            scores = results[0].boxes.conf.cpu().numpy()
            class_ids = results[0].boxes.cls.cpu().numpy().astype(int)
            
            return boxes, scores, class_ids
        else:
            return np.array([]), np.array([]), np.array([])
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        return np.array([]), np.array([]), np.array([])

def create_damage_chart(class_ids, scores):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"""
    if len(class_ids) == 0:
        return None
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    unique_classes, counts = np.unique(class_ids, return_counts=True)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    damage_data = []
    for class_id, count in zip(unique_classes, counts):
        class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "emoji": "‚ùì"})
        damage_data.append({
            '–¢–∏–ø': f"{class_info['emoji']} {class_info['name']}",
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
            '–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å': class_info['severity']
        })
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.bar(
        damage_data, 
        x='–¢–∏–ø', 
        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        color='–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å',
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
        color_discrete_map={
            '–ù–µ—Ç': '#28a745',
            '–ù–∏–∑–∫–∞—è': '#ffc107', 
            '–°—Ä–µ–¥–Ω—è—è': '#fd7e14',
            '–í—ã—Å–æ–∫–∞—è': '#dc3545'
        }
    )
    
    fig.update_layout(
        showlegend=True,
        height=400,
        font=dict(size=12)
    )
    
    return fig

def create_confidence_chart(scores):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    if len(scores) == 0:
        return None
    
    fig = go.Figure(data=[
        go.Histogram(
            x=scores,
            nbinsx=20,
            marker_color='#667eea',
            opacity=0.7
        )
    ])
    
    fig.update_layout(
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π",
        xaxis_title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        height=300
    )
    
    return fig

def save_analysis_history(image_name, detections, timestamp):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤"""
    if 'analysis_history' not in st.session_state:
        st.session_state['analysis_history'] = []
    
    history_item = {
        'timestamp': timestamp,
        'image_name': image_name,
        'detections_count': len(detections['boxes']) if detections else 0,
        'detections': detections
    }
    
    st.session_state['analysis_history'].append(history_item)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üöó Advanced Car Damage Detection</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–æ–º–æ—â—å—é –ò–ò</p>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        conf_threshold = st.slider(
            "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            min_value=0.1,
            max_value=1.0,
            value=0.5,
            step=0.05,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–µ–∫—Ü–∏–π"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.markdown("## üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        model_path = "runs/damage/weights/best.pt"
        if os.path.exists(model_path):
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            file_size = os.path.getsize(model_path) / (1024 * 1024)
            st.info(f"–†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        else:
            st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        if 'analysis_history' in st.session_state:
            st.markdown("## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
            total_analyses = len(st.session_state['analysis_history'])
            st.metric("–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤", total_analyses)
            
            if total_analyses > 0:
                total_detections = sum(item['detections_count'] for item in st.session_state['analysis_history'])
                st.metric("–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π", total_detections)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3, tab4 = st.tabs(["üîç –ê–Ω–∞–ª–∏–∑", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"])
    
    with tab1:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown('<div class="upload-section">', unsafe_allow_html=True)
            st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
            
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                type=['jpg', 'jpeg', 'png', 'bmp'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP"
            )
            
            if uploaded_file is not None:
                image = Image.open(uploaded_file)
                st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                
                if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True):
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                        model = load_model()
                        
                        if model is not None:
                            img_array = preprocess_image(image)
                            boxes, scores, class_ids = predict_damage(model, img_array, conf_threshold)
                            
                            if len(boxes) > 0:
                                img_with_detections = draw_detections(img_array, boxes, scores, class_ids)
                                img_with_detections_rgb = cv2.cvtColor(img_with_detections, cv2.COLOR_BGR2RGB)
                                
                                st.session_state['result_image'] = img_with_detections_rgb
                                st.session_state['detections'] = {
                                    'boxes': boxes,
                                    'scores': scores,
                                    'class_ids': class_ids
                                }
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                                save_analysis_history(uploaded_file.name, st.session_state['detections'], timestamp)
                                
                                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                            else:
                                st.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                                st.session_state['result_image'] = None
                                st.session_state['detections'] = None
            else:
                st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
            
            if 'result_image' in st.session_state and st.session_state['result_image'] is not None:
                st.image(st.session_state['result_image'], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞", use_column_width=True)
                
                if 'detections' in st.session_state and st.session_state['detections'] is not None:
                    detections = st.session_state['detections']
                    boxes = detections['boxes']
                    scores = detections['scores']
                    class_ids = detections['class_ids']
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    col_metric1, col_metric2, col_metric3 = st.columns(3)
                    
                    with col_metric1:
                        st.metric("–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π", len(boxes))
                    
                    with col_metric2:
                        avg_confidence = np.mean(scores) if len(scores) > 0 else 0
                        st.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{avg_confidence:.2f}")
                    
                    with col_metric3:
                        max_confidence = np.max(scores) if len(scores) > 0 else 0
                        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{max_confidence:.2f}")
                    
                    # –î–µ—Ç–∞–ª–∏
                    st.markdown("#### üîç –î–µ—Ç–∞–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
                    
                    for i, (box, score, class_id) in enumerate(zip(boxes, scores, class_ids)):
                        class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "color": "clean"})
                        
                        with st.expander(f"{class_info['emoji']} {class_info['name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f})"):
                            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {class_info['description']}")
                            st.markdown(f"**–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:** {class_info['severity']}")
                            st.markdown(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {class_info['action']}")
                            st.markdown(f"**–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** x1={box[0]:.0f}, y1={box[1]:.0f}, x2={box[2]:.0f}, y2={box[3]:.0f}")
                            st.markdown(f"**–†–∞–∑–º–µ—Ä:** {box[2]-box[0]:.0f} x {box[3]-box[1]:.0f} –ø–∏–∫—Å–µ–ª–µ–π")
            else:
                st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'")
    
    with tab2:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        if 'detections' in st.session_state and st.session_state['detections'] is not None:
            detections = st.session_state['detections']
            class_ids = detections['class_ids']
            scores = detections['scores']
            
            col_chart1, col_chart2 = st.columns(2)
            
            with col_chart1:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
                damage_chart = create_damage_chart(class_ids, scores)
                if damage_chart:
                    st.plotly_chart(damage_chart, use_container_width=True)
            
            with col_chart2:
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                confidence_chart = create_confidence_chart(scores)
                if confidence_chart:
                    st.plotly_chart(confidence_chart, use_container_width=True)
            
            # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            st.markdown("#### üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
            
            if len(class_ids) > 0:
                unique_classes, counts = np.unique(class_ids, return_counts=True)
                
                summary_data = []
                for class_id, count in zip(unique_classes, counts):
                    class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "emoji": "‚ùì"})
                    class_scores = scores[class_ids == class_id]
                    avg_score = np.mean(class_scores) if len(class_scores) > 0 else 0
                    
                    summary_data.append({
                        '–¢–∏–ø': f"{class_info['emoji']} {class_info['name']}",
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                        '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{avg_score:.2f}",
                        '–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å': class_info['severity']
                    })
                
                import pandas as pd
                df = pd.DataFrame(summary_data)
                st.dataframe(df, use_container_width=True)
        else:
            st.info("üëà –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    with tab3:
        st.markdown("### üìö –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
        
        if 'analysis_history' in st.session_state and len(st.session_state['analysis_history']) > 0:
            history = st.session_state['analysis_history']
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            history_sorted = sorted(history, key=lambda x: x['timestamp'], reverse=True)
            
            for i, item in enumerate(history_sorted):
                with st.expander(f"üì∏ {item['image_name']} - {item['timestamp']}"):
                    st.markdown(f"**–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {item['timestamp']}")
                    st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:** {item['detections_count']}")
                    
                    if item['detections'] and item['detections_count'] > 0:
                        detections = item['detections']
                        class_ids = detections['class_ids']
                        scores = detections['scores']
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
                        unique_classes, counts = np.unique(class_ids, return_counts=True)
                        for class_id, count in zip(unique_classes, counts):
                            class_info = CLASS_INFO.get(class_id, {"name": f"Class {class_id}", "emoji": "‚ùì"})
                            st.markdown(f"- {class_info['emoji']} {class_info['name']}: {count} —à—Ç.")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
                st.session_state['analysis_history'] = []
                st.rerun()
        else:
            st.info("üìù –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞")
    
    with tab4:
        st.markdown("### ‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        st.markdown("""
        #### üöó Car Damage Detection
        
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π.
        
        #### üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ** 5 —Ç–∏–ø–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        - **–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å** –±–ª–∞–≥–æ–¥–∞—Ä—è –º–æ–¥–µ–ª–∏ YOLOv8
        - **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        - **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - **–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤** –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        #### üè∑Ô∏è –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:
        """)
        
        for class_id, info in CLASS_INFO.items():
            st.markdown(f"- **{info['emoji']} {info['name']}**: {info['description']}")
        
        st.markdown("""
        #### üõ†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
        - **YOLOv8** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        - **Streamlit** - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        - **OpenCV** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - **PyTorch** - –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        
        #### üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
        –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
        """)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; padding: 2rem;'>
            <p>üöó Advanced Car Damage Detection | Powered by YOLOv8 | Made with ‚ù§Ô∏è and Streamlit</p>
            <p style='font-size: 0.8rem; margin-top: 1rem;'>
                –í–µ—Ä—Å–∏—è 2.0 | ¬© 2024 | –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
            </p>
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
